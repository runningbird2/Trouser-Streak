plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.meteordev.org/releases"}
    maven { url "https://maven.meteordev.org/snapshots" }
}

loom {
    accessWidenerPath = file("src/main/resources/streak-addon.accesswidener")
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Meteor
    modImplementation "meteordevelopment:meteor-client:${project.minecraft_version}-SNAPSHOT"

    // Dev runtime mod: Baritone (local jar, not bundled)
    // Preferred: baritone-fabric-1.14.0.jar, Fallback: baritone-api-fabric-1.14.0.jar (+ nether-pathfinder)
    File baritoneFull = file('libs/baritone-fabric-1.14.0.jar')
    File baritoneApi = file('libs/baritone-api-fabric-1.14.0.jar')
    File netherPathfinder = file('libs/nether-pathfinder-1.4.1.jar')

    if (baritoneFull.exists()) {
        modLocalRuntime files(baritoneFull)
        logger.lifecycle("[dev] Using Baritone full fabric jar: ${baritoneFull.name}")
    } else if (baritoneApi.exists()) {
        modLocalRuntime files(baritoneApi)
        if (netherPathfinder.exists()) {
            modLocalRuntime files(netherPathfinder)
            logger.lifecycle("[dev] Using Baritone API + Nether Pathfinder: ${baritoneApi.name}, ${netherPathfinder.name}")
        } else {
            logger.warn("[dev] Using Baritone API jar without nether-pathfinder; if you see NoClassDefFoundError for dev.babbaj.pathfinder, extract it from the API jar to libs/nether-pathfinder-1.4.1.jar")
        }
    } else {
        logger.lifecycle("[dev] Baritone jar not found in libs/. Expected baritone-fabric-1.14.0.jar or baritone-api-fabric-1.14.0.jar")
    }

    // Test
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

processResources {
    inputs.properties([
            "version": project.version,
            "mc_version": project.minecraft_version
    ])

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mc_version": project.minecraft_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}

test {
    useJUnitPlatform()
}
